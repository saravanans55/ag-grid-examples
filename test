import { Component } from '@angular/core';
const XlsxPopulate = require('@eyeseetea/xlsx-populate');

@Component({
  selector: 'app-export',
  templateUrl: './export.component.html',
  styleUrls: ['./export.component.css']
})
export class ExportComponent {
  rowDetails = [
    {
      "Mark 1": 90,
      "Mark 2": 100,
      "Mark 3": 70,
    },
    // Add more rows if needed
  ];

  commonColumnWidth = 100; // Set the common width in pixels

  async exportToExcel(): Promise<void> {
    if (this.rowDetails.length === 0) {
      return; // No data to export
    }

    const columnNames = Object.keys(this.rowDetails[0]);

    // Create a new workbook
    const workbook = await XlsxPopulate.fromBlankAsync();

    // Get the first sheet in the workbook
    const sheet = workbook.sheet(0);

    // Set a common width for all columns
    columnNames.forEach((columnName, columnIndex) => {
      sheet.column(columnIndex + 1).width(this.commonColumnWidth);
    });

    // Make header cells bold
    sheet.row(1).style({ bold: true });

    // Add data
    this.rowDetails.forEach((row, rowIndex) => {
      columnNames.forEach((columnName, columnIndex) => {
        const cellValue = row[columnName];
        sheet.cell(rowIndex + 2, columnIndex + 1).value(cellValue);
      });
    });

    // Generate the Excel file
    const excelBuffer = await workbook.outputAsync();
    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    const fileName = 'exported-data.xlsx';

    // Create a download link and trigger the download
    const link = document.createElement('a');
    link.href = window.URL.createObjectURL(blob);
    link.download = fileName;
    link.click();
  }
}
