import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';
import { AgGridAngular } from 'ag-grid-angular';
import { fromEvent } from 'rxjs';
import { debounceTime, filter, map } from 'rxjs/operators';

@Component({
  selector: 'app-your-component',
  templateUrl: './your-component.component.html',
  styleUrls: ['./your-component.component.css']
})
export class YourComponent implements AfterViewInit {
  @ViewChild('agGrid', { static: true }) agGrid: AgGridAngular;

  constructor() { }

  ngAfterViewInit() {
    this.setupFilterInputListener();
  }

  setupFilterInputListener() {
    const toolPanelFilterComp = this.agGrid.api.getToolPanelInstance('filters');
    const filterInput = document.querySelector('.ag-filter-filter');

    if (filterInput) {
      fromEvent(filterInput, 'input').pipe(
        debounceTime(2000),
        map((event: any) => event.target.value.trim()),
        filter(searchValue => searchValue.length > 3)
      ).subscribe(searchValue => {
        this.expandRelevantFilterGroups(toolPanelFilterComp, searchValue);
      });
    }
  }

  expandRelevantFilterGroups(toolPanelFilterComp: any, searchValue: string) {
    // Get all filter columns
    const allFilterColumns = toolPanelFilterComp.getAllFilterColumns();

    // Iterate over each filter column
    allFilterColumns.forEach(column => {
      const groupLabel = toolPanelFilterComp.getGroupName(column.getColId());

      // Check if the group label includes the search value
      if (groupLabel.toLowerCase().includes(searchValue.toLowerCase())) {
        // Expand the filter group
        toolPanelFilterComp.expandFilterGroup(column.getColId());

        // Iterate over each child filter field
        column.getChildren().forEach(child => {
          // Check if the filter field header name includes the search value
          if (child.getColDef().headerName.toLowerCase().includes(searchValue.toLowerCase())) {
            // Expand the filter field
            toolPanelFilterComp.expandFilter(child.getColId());
          }
        });
      }
    });
  }
}
