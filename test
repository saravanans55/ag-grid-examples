import * as XLSX from 'xlsx';

export class ExportComponent {
  rowDetails = [
    {
      "Mark 1": 90,
      "Mark 2": 100,
      "Mark 3": 70,
    },
    // Add more rows if needed
  ];

  commonColumnWidth = 100; // Set the common width in pixels

  exportToExcel(): void {
    const workbook = XLSX.utils.book_new();
    const worksheet = XLSX.utils.json_to_sheet(this.rowDetails, { header: Object.keys(this.rowDetails[0]) });

    // Set a common width for all columns
    const columnWidths = Array(Object.keys(this.rowDetails[0]).length).fill({ wpx: this.commonColumnWidth });

    worksheet['!cols'] = columnWidths;

    // Make header cells bold
    const headerRange = XLSX.utils.decode_range(worksheet['!ref']); // Get the range of the header row
    for (let colIndex = headerRange.s.c; colIndex <= headerRange.e.c; colIndex++) {
      const cellAddress = XLSX.utils.encode_cell({ r: headerRange.s.r, c: colIndex }); // Get cell address
      const cell = worksheet[cellAddress]; // Get the cell
      cell.s = { font: { bold: true } }; // Make the cell's font bold
    }

    // Add the worksheet to the workbook
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');

    // Save the workbook
    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    const fileName = 'exported-data.xlsx';
    
    // Create a download link and trigger the download
    const link = document.createElement('a');
    link.href = window.URL.createObjectURL(blob);
    link.download = fileName;
    link.click();
  }
}
