import { Component } from '@angular/core';
import * as fs from 'file-saver';
import * as ExcelJS from 'exceljs';

@Component({
  selector: 'app-export',
  templateUrl: './export.component.html',
  styleUrls: ['./export.component.css']
})
export class ExportComponent {
  rowDetails = [
    {
      "Mark 1": 90,
      "Mark 2": 100,
      "Mark 3": 70,
    },
    // Add more rows if needed
  ];

  commonColumnWidth = 100; // Set the common width in pixels

  exportToExcel(): void {
    if (this.rowDetails.length === 0) {
      return; // No data to export
    }

    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('Sheet1');

    const columnNames = Object.keys(this.rowDetails[0]);

    // Make header cells bold and set a common width for all columns
    columnNames.forEach((columnName, columnIndex) => {
      worksheet.getColumn(columnName).width = this.commonColumnWidth;
      worksheet.getCell(1, columnIndex + 1).value = columnName;
      worksheet.getCell(1, columnIndex + 1).font = { bold: true };
    });

    // Add data
    this.rowDetails.forEach((row, rowIndex) => {
      columnNames.forEach((columnName, columnIndex) => {
        const cellValue = row[columnName];
        worksheet.getCell(rowIndex + 2, columnIndex + 1).value = cellValue;
      });
    });

    // Generate the Excel file
    workbook.xlsx.writeBuffer().then(buffer => {
      const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      const fileName = 'exported-data.xlsx';

      // Save the file using FileSaver.js
      fs.saveAs(blob, fileName);
    });
  }
}
