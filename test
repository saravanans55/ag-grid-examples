import { Component, OnInit, ViewChild } from '@angular/core';
import { GridApi, GridReadyEvent } from 'ag-grid-community';

@Component({
  selector: 'app-my-grid',
  templateUrl: './my-grid.component.html',
  styleUrls: ['./my-grid.component.css']
})
export class MyGridComponent implements OnInit {
  @ViewChild('agGrid', { static: true }) agGrid; // Reference to the ag-Grid component
  gridApi: GridApi;
  isOverlayVisible = false; // Track overlay visibility
  hoveredRowData: any; // Store hovered row data

  ngOnInit() {
    // Initialize your grid data
    // For example:
    // this.rowData = [...];
  }

  onGridReady(params: GridReadyEvent) {
    this.gridApi = params.api;
    const gridElement = this.agGrid.nativeElement;

    gridElement.addEventListener('mouseover', (event) => {
      const rowIndex = this.getRowIndexFromEvent(event);
      const hoveredRowNode = this.gridApi.getDisplayedRowAtIndex(rowIndex);

      if (hoveredRowNode) {
        this.isOverlayVisible = true;
        this.hoveredRowData = hoveredRowNode.data; // Access row data
      }
    });

    gridElement.addEventListener('mouseout', () => {
      this.isOverlayVisible = false;
      this.hoveredRowData = null; // Clear hovered data on mouseout
    });
  }

  private getRowIndexFromEvent(event: MouseEvent): number {
    const target = event.target as HTMLElement;
    const rowElement = target.closest('.ag-row');
    return rowElement ? parseInt(rowElement.getAttribute('row-index'), 10) : -1;
  }
}
