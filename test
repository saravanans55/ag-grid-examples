import { Component } from '@angular/core';

@Component({
  selector: 'app-merge-arrays',
  template: '<p>Check the console for the merged result</p>',
})
export class MergeArraysComponent {
  constructor() {
    this.mergeArrays();
  }

  mergeArrays() {
    // Sample data based on the provided image
    const response = [
      {
        result: {
          groupByAggregations: [],
          metrics: { _internal_object_set_count_aggregation_: 5467718 },
          subAggregations: [
            {
              buckets: [
                {
                  key: "Traditional",
                  metrics: {
                    sum_of_gross_written_premium: 189649794803.65155,
                    _internal_object_set_count_aggregation_: 5425428,
                  },
                  subAggregations: [
                    {
                      key: "IP",
                      metrics: {},
                      subAggregations: [],
                    },
                    {
                      key: "IRS",
                      metrics: {},
                      subAggregations: [],
                    },
                    {
                      key: "ECM",
                      metrics: {},
                      subAggregations: [],
                    },
                    {
                      key: "IP_IRS",
                      metrics: {},
                      subAggregations: [],
                    },
                    {
                      key: "Blanks",
                      metrics: {},
                      subAggregations: [],
                    },
                    {
                      key: "",
                      metrics: {},
                      subAggregations: [],
                    },
                  ],
                },
              ],
            },
          ],
          name: "gwp_by_pipeline_type",
        },
      },
      {
        result: {
          groupByAggregations: [],
          metrics: { _internal_object_set_count_aggregation_: 5467718 },
          subAggregations: [
            {
              buckets: [
                {
                  key: "Traditional",
                  metrics: {
                    sum_of_final_gwp: 180792975564.05325,
                    _internal_object_set_count_aggregation_: 5425428,
                  },
                  subAggregations: [
                    {
                      key: "IP",
                      metrics: {},
                      subAggregations: [],
                    },
                    {
                      key: "IRS",
                      metrics: {},
                      subAggregations: [],
                    },
                    {
                      key: "ECM",
                      metrics: {},
                      subAggregations: [],
                    },
                    {
                      key: "IP_IRS",
                      metrics: {},
                      subAggregations: [],
                    },
                    {
                      key: "Blanks",
                      metrics: {},
                      subAggregations: [],
                    },
                    {
                      key: "",
                      metrics: {},
                      subAggregations: [],
                    },
                  ],
                },
              ],
            },
          ],
          name: "gwp_by_pipeline_type",
        },
      },
    ];

    const mergedResponse = response.reduce((acc, cur) => {
      cur.result.subAggregations.forEach(subAgg => {
        subAgg.buckets.forEach(bucket => {
          let existingBucket = acc.find(b => b.key === bucket.key);
          if (!existingBucket) {
            existingBucket = { ...bucket };
            acc.push(existingBucket);
          } else {
            existingBucket.metrics = { ...existingBucket.metrics, ...bucket.metrics };
          }
        });
      });
      return acc;
    }, []);

    console.log('Merged Response:', mergedResponse);
  }
}
