export class YourComponent implements AfterViewInit, OnDestroy {
  // ... (other code)

  private focusedInputElement: HTMLElement;

  ngAfterViewInit(): void {
    // Get the grid's native HTML element (grid container)
    const gridNativeElement = this.gridContainer.nativeElement as HTMLElement;

    // Add a focusin event listener to the grid container
    gridNativeElement.addEventListener('focusin', this.onFocusIn);
  }

  ngOnDestroy(): void {
    // Remove the event listener when the component is destroyed
    const gridNativeElement = this.gridContainer.nativeElement as HTMLElement;
    gridNativeElement.removeEventListener('focusin', this.onFocusIn);
  }

  onFocusIn(event: FocusEvent): void {
    // Get the focused element
    const focusedElement = document.activeElement as HTMLElement;

    // Check if the focused element is a number input or text input inside the grid
    if (focusedElement) {
      if (focusedElement.classList.contains('ag-cell-edit-input') && focusedElement.type === 'number') {
        // Number input inside the grid
        this.focusedInputElement = focusedElement;
        this.focusedInputElement.setAttribute('autocomplete', 'off');
      } else if (focusedElement.tagName === 'INPUT' && focusedElement.type === 'text') {
        // Text input inside the grid (input[type="text"])
        this.focusedInputElement = focusedElement;
        this.focusedInputElement.setAttribute('autocomplete', 'off');
      }
    }
  }
}
