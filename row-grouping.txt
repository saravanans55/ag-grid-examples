export class YourComponent implements OnDestroy {
  // ... (other code)

  editedRows: Set<number> = new Set<number>();
  private debounceSubject = new Subject<any>();
  private debounceSubscription: Subscription;

  constructor() {
    // Subscribe to the debouncedSubject and process the events with debounceTime
    this.debounceSubscription = this.debounceSubject.pipe(debounceTime(200)).subscribe((event) => {
      this.onRowValueChanged(event);
    });
  }

  ngOnDestroy(): void {
    // Unsubscribe from the debounceSubscription to avoid memory leaks
    this.debounceSubscription.unsubscribe();
  }

  onRowValueChanged(event): void {
    // Add the row index to the editedRows set
    this.editedRows.add(event.node.rowIndex);
  }

  // Call this method instead of directly adding to editedRows set
  debounceRowValueChanged(event): void {
    this.debounceSubject.next(event);
  }
}
