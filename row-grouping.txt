onFilterTextBoxChanged() {
    let txt = (document.getElementById('filter-text-box') as HTMLInputElement).value;
    if (this.gridApi != null) {
      // Filter the rows based on the given search term
      const filteredRows = this.rowData.filter((row) => {
        // Generate the filter conditions for all fields
        return this.areAnyFieldsMatching(row, txt);
      });

      // Update the grid with the filtered data
      this.gridApi.setRowData(filteredRows);
    }
  }

  areAnyFieldsMatching(row: any, filterText: string): boolean {
    const fields = Object.keys(row);
    for (const field of fields) {
      if (this.isNestedObject(row[field])) {
        // If the property is a nested object, recursively check its fields
        if (this.areAnyFieldsMatching(row[field], filterText)) {
          return true;
        }
      } else if (typeof row[field] === 'string') {
        // Check if the field value contains the filter term
        if (row[field].toLowerCase().includes(filterText.toLowerCase())) {
          return true;
        }
      }
    }
    return false;
  }

  isNestedObject(obj: any): boolean {
    return typeof obj === 'object' && obj !== null && !Array.isArray(obj);
  }
