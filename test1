public isExpLessthanInceptiondate: boolean = false;
public inceptionExpirationDateValidation(val: any, date: string) {
  let inception_date = null, expiration_date = null;

  if (date === 'inceptionDate') {
    inception_date = val;
    expiration_date = this.getControl('dealDetails', 'expirationDate')?.value;
  } else {
    expiration_date = val;
    inception_date = this.getControl('dealDetails', 'inceptionDate')?.value;
  }

  console.log("inception_date=>", inception_date, "expiration_date=>", expiration_date);

  if (inception_date && expiration_date) {
    let inc_date_val = null, exp_date_val = null;

    // Parse the dates correctly
    inc_date_val = typeof inception_date === 'string' ? Date.parse(inception_date) : Date.parse(this.getDateValue(inception_date));
    exp_date_val = typeof expiration_date === 'string' ? Date.parse(expiration_date) : Date.parse(this.getDateValue(expiration_date));

    console.log("Parsed inc_date_val=>", inc_date_val, "Parsed exp_date_val=>", exp_date_val);

    if (inc_date_val && exp_date_val) {
      if (inc_date_val === exp_date_val) {
        console.log("Inception: The inception and expiration date should not be same", inc_date_val, exp_date_val);
        this.isExpLessthanInceptiondate = false;
        this.isDatesSame = true;
        this.getControl('dealDetails', 'expirationDate').setErrors({ error_key: true });
        this.getControl('dealDetails', 'expirationDate').markAsTouched();
      } else if (inc_date_val > exp_date_val) {
        console.log("Inception: Expiration date cannot be less than Inception Date", inc_date_val, exp_date_val);
        this.isExpLessthanInceptiondate = true;
        this.isDatesSame = false;
        this.getControl('dealDetails', 'expirationDate').setErrors({ error_key: true });
        this.getControl('dealDetails', 'expirationDate').markAsTouched();
      } else {
        console.log("Inception: correct scenario", inc_date_val, exp_date_val);
        this.isExpLessthanInceptiondate = false;
        this.isDatesSame = false;
        this.getControl('dealDetails', 'expirationDate').setErrors({ error_key: false });
        this.getControl('dealDetails', 'expirationDate').markAsUntouched();
      }
    } else {
      console.error("Inception: Unable to parse date values", inc_date_val, exp_date_val);
    }
  } else {
    console.error("Inception: One or both dates are null", inception_date, expiration_date);
  }
}

private getDateValue(date: any): string {
  return moment(date).format('YYYY-MM-DD');
}
